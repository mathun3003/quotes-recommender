name: Code Style
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
  release:
    branches:
      - 'release/*'

jobs:

  # Typing checking
  typing:
    name: MyPy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11.0
          architecture: x64
          plugins : |
            pydantic.mypy
          ignore_missing_imports: true
      - name: "☁️ Checkout Repository"
        uses: actions/checkout@v3
      - name: "Install poetry"
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: "📦 Install dependencies"
        run: |
          poetry lock --no-update
          poetry install --no-interaction --no-root --all-extras
      - name: "🔍 Run mypy"
        run: |
          poetry run mypy src/

  # Pep8
  pep8:
    name: PEP8
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ Checkout Repository"
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: "🔍 Run PEP8"
        uses: quentinguidee/pep8-action@v1
        with:
          arguments: '--max-line-length=120'

  # Pylint checking
  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: [ "3.11" ]
    steps:
      - name: "☁️ Checkout Repository"
        uses: actions/checkout@v3
      - name: "🔧 Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Install poetry"
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: "📦 Install dependencies"
        run: |
          poetry lock --no-update
          poetry install --no-interaction --no-root --all-extras
      - name: "🔍 Lint Code"
        run: |
          poetry run pylint src -d C0103,C0114,E0213,E1101,W1203,W0511 $(git ls-files 'src/**/*.py')
        # disable: invalid-name, missing-module-docstring, no-self-argument, no-member, logging-fstring-interpolation, to-dos

  # isort
  isort:
    name: isort
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: isort/isort-action@v1
        with:
          requirements-files: "pyproject.toml"

  # Formatting
  black:
    name: Black
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ Checkout Repository"
        uses: actions/checkout@v3
      - name: "🔧 Autobuild"
        uses: actions/setup-python@v1
        with:
          python-version: 3.11
          line-length: 120
          ignore_missing_imports: true
      - name: "Install poetry"
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: "🔍 Run Black"
        run: |
            poetry lock --no-update
            poetry install --no-interaction --no-root
            poetry run black --check --diff --verbose .
